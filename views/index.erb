<!DOCTYPE html>  
<html>  
<head>  
    <title>Doppel</title>  
    <style>  
        body { font-family: Arial, sans-serif; margin: 20px; }  
        #chat-container { max-width: 800px; margin: 0 auto; }  
        #messages {   
            height: 400px;   
            border: 1px solid #ccc;   
            padding: 10px;   
            overflow-y: auto;   
            margin-bottom: 10px;  
            background-color: #f9f9f9;  
        }   
        #input-container { display: flex; gap: 10px; }  
        #message-input {   
            flex: 1;   
            padding: 10px;   
            border: 1px solid #ccc;   
            border-radius: 4px;  
        }  
        button {   
            padding: 10px 20px;   
            background-color: #007bff;   
            color: white;   
            border: none;   
            border-radius: 4px;   
            cursor: pointer;  
        }  
        button:hover { background-color: #0056b3; }  
        .message { margin-bottom: 10px; padding: 5px; }  
        .user-message { background-color: #e3f2fd; border-left: 3px solid #2196f3; }  
        .ai-message { background-color: #f3e5f5; border-left: 3px solid #9c27b0; }  
        .error-message { background-color: #ffebee; border-left: 3px solid #f44336; }  
        .tool-message { background-color: #e8f5e9; border-left: 3px solid #4caf50; font-style: italic; }
        .system-message { background-color: #fff8e1; border-left: 3px solid #ff9800; }
    </style>  
</head>  
<body>  
    <div id="chat-container">  
        <h1>Doppel Engineer</h1>  
        <div><a href="<%= @web_ide_url %>">Web IDE</a></div>
        <div id="messages"></div>  
        <div id="input-container">  
            <input type="text" id="message-input" placeholder="Enter a message..." />  
            <button onclick="sendMessage()">Send</button>  
        </div>  
    </div>  
  
    <script>
        const messagesDiv = document.getElementById('messages');
        const input = document.getElementById('message-input');
        let ws;

        // --- Optimized Rendering Globals ---
        const updateQueue = new Map();
        let isUpdateScheduled = false;

        function initWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/`;

            ws = new WebSocket(wsUrl);

            ws.onopen = () => {
                console.log('WebSocket connection established');
                addSystemMessage('Connected to server.');
            };

            ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                console.log('Received:', data);
                switch (data.type) {
                    case 'history':
                        renderHistory(data.payload);
                        break;
                    case 'user_message':
                        addMessage(data.payload.id, data.payload.author, data.payload.text, 'user-message');
                        // Prepare a container for the AI response
                        addMessage(data.payload.id + '-ai', 'AI', '', 'ai-message');
                        break;
                    case 'ai_chunk':
                        scheduleUpdate(data.payload.id + '-ai', data.payload.text);
                        break;
                    case 'ai_end':
                        // Ensure any remaining text in the queue is flushed
                        processUpdateQueue();
                        break;
                    case 'error':
                        addMessage(data.payload.id, 'Error', data.payload.message, 'error-message');
                        break;
                }
            };

            ws.onclose = () => {
                console.log('WebSocket connection closed');
                addSystemMessage('Connection lost. Attempting to reconnect in 3 seconds...');
                setTimeout(initWebSocket, 3000);
            };

            ws.onerror = (error) => {
                console.error('WebSocket error:', error);
                addSystemMessage('WebSocket error. See console for details.');
            };
        }

        function sendMessage() {
            const text = input.value.trim();
            if (!text || !ws || ws.readyState !== WebSocket.OPEN) return;

            const message = {
                type: 'user_message',
                payload: {
                    source: 'web',
                    author: 'You',
                    text: text
                }
            };
            ws.send(JSON.stringify(message));
            input.value = '';
        }
        
        function renderHistory(history) {
            messagesDiv.innerHTML = ''; // Clear existing messages
            history.forEach(msg => {
                const { type, payload } = msg;
                if (type === 'user_message') {
                    addMessage(payload.id, payload.author, payload.text, 'user-message');
                    addMessage(payload.id + '-ai', 'AI', '', 'ai-message');
                } else if (type === 'ai_chunk') {
                    // In history rendering, append directly without throttling
                    appendToMessage(payload.id + '-ai', payload.text);
                }
            });
             addSystemMessage('Chat history loaded.');
        }

        function addMessage(id, sender, content, className) {
            const messageDiv = document.createElement('div');
            messageDiv.id = 'msg-' + id;
            messageDiv.className = `message ${className}`;
            messageDiv.innerHTML = `<strong>${sender}:</strong> <span class="content">${content}</span>`;
            messagesDiv.appendChild(messageDiv);
            scrollToBottom();
        }

        function appendToMessage(id, content) {
            const messageDiv = document.getElementById('msg-' + id);
            if (messageDiv) {
                const contentSpan = messageDiv.querySelector('.content');
                if (contentSpan) {
                    contentSpan.textContent += content;
                }
            }
        }

        function scheduleUpdate(id, content) {
            if (!updateQueue.has(id)) {
                updateQueue.set(id, '');
            }
            updateQueue.set(id, updateQueue.get(id) + content);

            if (!isUpdateScheduled) {
                isUpdateScheduled = true;
                requestAnimationFrame(processUpdateQueue);
            }
        }

        function processUpdateQueue() {
            updateQueue.forEach((content, id) => {
                appendToMessage(id, content);
            });
            updateQueue.clear();
            isUpdateScheduled = false;
            scrollToBottom();
        }
        
        function addSystemMessage(content) {
            addMessage('system', 'System', content, 'system-message');
        }

        function scrollToBottom() {
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        // Send message on Enter key
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Initialize WebSocket connection on page load
        initWebSocket();
    </script>  
</body>  
</html>