<!DOCTYPE html>  
<html>  
<head>  
    <title>Doppel</title>  
    <style>  
        body { font-family: Arial, sans-serif; margin: 20px; }  
        #chat-container { max-width: 800px; margin: 0 auto; }  
        #messages {   
            height: 400px;   
            border: 1px solid #ccc;   
            padding: 10px;   
            overflow-y: auto;   
            margin-bottom: 10px;  
            background-color: #f9f9f9;  
        }   
        #input-container { display: flex; gap: 10px; }  
        #message-input {   
            flex: 1;   
            padding: 10px;   
            border: 1px solid #ccc;   
            border-radius: 4px;  
        }  
        button {   
            padding: 10px 20px;   
            background-color: #007bff;   
            color: white;   
            border: none;   
            border-radius: 4px;   
            cursor: pointer;  
        }  
        button:hover { background-color: #0056b3; }  
        .message { margin-bottom: 10px; padding: 5px; }  
        .user-message { background-color: #e3f2fd; border-left: 3px solid #2196f3; }  
        .ai-message { background-color: #f3e5f5; border-left: 3px solid #9c27b0; }  
        .error-message { background-color: #ffebee; border-left: 3px solid #f44336; }  
        .tool-message { background-color: #e8f5e9; border-left: 3px solid #4caf50; font-style: italic; }
        .system-message { background-color: #fff8e1; border-left: 3px solid #ff9800; }
    </style>  
</head>  
<body>  
    <div id="chat-container">  
        <h1>Doppel Engineer</h1>  
        <div id="messages"></div>  
        <div id="input-container">  
            <input type="text" id="message-input" placeholder="Enter a message..." />  
            <button onclick="sendMessage()">Send</button>  
        </div>  
    </div>  
  
    <script>  
        // 同一オリジンのSSEで中継するため、外部HTTP/WSへは直接アクセスしない
        let currentStream = null;
  
        function createSession() {  
            addMessage('System', 'Ready.', 'system-message');  
        }
  
        function sendMessage() {  
            const input = document.getElementById('message-input');  
            const message = input.value.trim();  
            if (!message) return;  
  
            // 前のストリームがあれば閉じる
            if (currentStream) { currentStream.close(); currentStream = null; }
  
            addMessage('You', message, 'user-message');  
            addMessage('Gemini', '', 'ai-message');
  
            // 同一オリジンのSSEに接続
            const url = `/stream?prompt=${encodeURIComponent(message)}`;
            const es = new EventSource(url);
            currentStream = es;
  
            es.onmessage = (e) => {
                appendToLastMessage(e.data);
            };
            es.addEventListener('end', (e) => {
                es.close();
                currentStream = null;
            });
            es.addEventListener('error', (e) => {
                const state = ['CONNECTING','OPEN','CLOSED'][es.readyState] || es.readyState;
                addMessage('Error', `Streaming error. state=${state}`, 'error-message');
                try {
                  addMessage('Error', `event=${JSON.stringify(e)}`, 'error-message');
                } catch {}
                es.close();
                currentStream = null;
            });

            // サーバ側が送る backend_error イベント
            es.addEventListener('backend_error', (e) => {
                if (e.data) {
                  addMessage('Backend', e.data, 'error-message');
                }
            });
  
            input.value = '';
        }  
  
        function addMessage(sender, content, className) {  
            const messagesDiv = document.getElementById('messages');  
            const messageDiv = document.createElement('div');  
            messageDiv.className = `message ${className}`;  
            messageDiv.innerHTML = `<strong>${sender}:</strong> <span class="content">${content}</span>`;  
            messagesDiv.appendChild(messageDiv);  
            messagesDiv.scrollTop = messagesDiv.scrollHeight;  
        }  
  
        function appendToLastMessage(content) {  
            const messagesDiv = document.getElementById('messages');  
            const lastMessage = messagesDiv.lastElementChild;  
            if (lastMessage) {  
                const contentSpan = lastMessage.querySelector('.content');  
                if (contentSpan) {  
                    contentSpan.textContent += content;  
                }  
            }  
            messagesDiv.scrollTop = messagesDiv.scrollHeight;  
        }  
  
        // Send message on Enter key
        document.getElementById('message-input').addEventListener('keypress', (e) => {  
            if (e.key === 'Enter') {  
                sendMessage();  
            }  
        });  
  
        // Create session on page load
        createSession();  
    </script>  
</body>  
</html>